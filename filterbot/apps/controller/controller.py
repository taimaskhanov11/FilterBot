import asyncio
from asyncio import Queue
from pathlib import Path
from typing import Optional

from loguru import logger
from pydantic import BaseModel
from telethon import TelegramClient, events
from telethon.tl import patched, types

from filterbot.apps.bot import temp
from filterbot.apps.bot.markups import common_menu
from filterbot.apps.bot.temp import controller_codes_queue, controllers
from filterbot.db.models import User, Account, Chat, DummyFilter
from filterbot.loader import bot, storage

SESSION_PATH = Path(Path(__file__).parent, "sessions")


class MethodController(BaseModel):
    client: Optional[TelegramClient]
    chats: Optional[dict[int, Chat]]

    class Config:
        arbitrary_types_allowed = True

    async def get_users_ids(self, text: str) -> dict[str, int]:

        ids: dict[str, int] = {}
        user_info = map(lambda x: x.strip(), text.split(","))

        for user_field in user_info:
            user_field: str
            if user_field[0].isdigit():
                user_field: int = int(user_field)
            user: types.User = await self.client.get_entity(user_field)
            ids[user.username] = user.id

        return ids

    async def listening(self):
        """–ü—Ä–æ—Å–ª—É—à–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.success(f"–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π {self} –∑–∞–ø—É—â–µ–Ω–æ")

        @self.client.on(events.NewMessage(incoming=True))
        async def message_handler(event: events.NewMessage.Event):
            # async def message_handler(message: patched.Message):
            message: patched.Message = event.message
            logger.trace(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message}. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è.")
            chat = self.chats.get(message.chat_id, DummyFilter())
            if await chat.message_check(message):
                logger.success(f"{self}|{message} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
                try:
                    await self.client.forward_messages(
                        chat.chat_storage.chat_id,
                        message,
                        # with_my_score=True,
                        # background=True,
                    )
                except Exception as e:
                    logger.warning(e)
                    await self.client.send_message(chat.chat_storage.chat_id, message)

        await self.client.run_until_disconnected()


class Controller(MethodController):
    user_id: int
    username: Optional[str]
    phone: str
    api_id: int
    api_hash: str
    path: Optional[Path]

    def __str__(self):
        return f"{self.user_id}[{self.api_id}]"

    def _init(self):
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {self}")
        self.path = Path(SESSION_PATH, f"{self.api_id}_{self.user_id}.session")
        self.client = TelegramClient(str(self.path), self.api_id, self.api_hash)
        controllers[self.user_id] = self

    async def run(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å client"""
        logger.debug(f"–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Client {self}")
        await self.client.connect()
        asyncio.create_task(self.listening())

    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç client"""
        await self.client.disconnect()
        logger.debug(f"Client {self} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def start(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π client –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å"""
        self._init()
        logger.debug(f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–∑–¥–∞–Ω")
        await self.client.connect()
        await self.listening()

    async def stop(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å client –∏ —É–¥–∞–ª–∏—Ç—å"""
        await self.client.disconnect()
        del temp.controllers[self.user_id]
        logger.info(f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä {self} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω")


class ConnectAccountController(Controller):
    async def _get_code(self):
        queue: Queue = controller_codes_queue.get(self.user_id)
        code = await queue.get()
        queue.task_done()
        del queue
        return code

    async def get_code(self):
        try:
            return await asyncio.wait_for(self._get_code(), timeout=30)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self} {e}")
            await bot.send_message(self.user_id, "üö´ –û—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏ ...")
            await self.client.disconnect()
            self.path.unlink()
            del controller_codes_queue[self.user_id]
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã {self}")

    async def connect_finished_message(self):
        await self.client.send_message("me", "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        await bot.send_message(
            self.user_id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω", reply_markup=common_menu.start_menu(self.user_id)
        )
        logger.success(f"–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")

    async def connect_account(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {self}")
        await self.client.start(lambda: self.phone, code_callback=lambda: self.get_code())
        await storage.finish(user=self.user_id)
        await self.connect_finished_message()
        await User.connect_account(self)
        logger.success(f"–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")

    async def start(self):
        self._init()
        logger.debug(f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–∑–¥–∞–Ω")
        await self.connect_account()
        await self.listening()


async def start_controller(acc: Account):
    acc_data = dict(acc)
    del acc_data["user_id"]
    controller = Controller(
        user_id=acc.user.user_id,
        username=acc.user.username,
        **acc_data,
        chats={chat.chat_id: chat for chat in acc.chats} or {},
    )
    asyncio.create_task(controller.start())
    logger.info(f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä {acc} –∑–∞–ø—É—â–µ–Ω")


async def restart_controller(user):
    account = await Account.get(user=user).prefetch_related(
        "chats__message_filter__user_filter",
        "chats__message_filter__word_filter",
        "chats__chat_storage",
        "user",
    )
    await start_controller(account)
    # await controller.client.send_message("me", _("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω"))


async def init_controllers():
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤")
    for acc in await Account.all().prefetch_related(
            "chats__message_filter__user_filter",
            "chats__message_filter__word_filter",
            "chats__chat_storage",
            "user",
    ):
        await start_controller(acc)
    logger.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


if __name__ == "__main__":
    pass
